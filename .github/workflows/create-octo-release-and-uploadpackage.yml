name: Octo Release, Push package and Build Info

on:
  workflow_call:
    inputs:
      octoProjectName:
        required: true
        type: string
      nugetPackageName:
        required: true
        type: string
      

jobs:
  release:
    name: Update Octo and Publish Packages
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      id-token: write
      packages: read
    env:
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUSSERVERAPIKEY  }}
      OCTOPUS_HOST: ${{ secrets.OCTOPUSSERVERURL }}
      OCTOPUS_SPACE: ${{ secrets.OCTOPUSSPACENAME }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: '5.x'
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.13

    - name: Push build information to Octopus Deploy üêô
      uses: OctopusDeploy/push-build-information-action@v1
      with:
        packages: |
          ${{ inputs. nugetPackageName}}
        version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
    
    - name: Install Octopus CLI üêô
      uses: OctopusDeploy/install-octopus-cli-action@v1
      with:
        version: latest
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -R

    - name: Push a package to Octopus Deploy üêô
      uses: OctopusDeploy/push-package-action@v2
      with:
        packages: |
          artifacts\${{ inputs.nugetPackageName }}.${{ steps.gitversion.outputs.nuGetVersionV2 }}\\${{ inputs.nugetPackageName }}.${{ steps.gitversion.outputs.nuGetVersionV2 }}.nupkg
          
    - name: Create a release in Octopus Deploy üêô
      uses: OctopusDeploy/create-release-action@v2
      with:
        project: ${{ inputs.octoProjectName }}
        release_number: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
        package_version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
